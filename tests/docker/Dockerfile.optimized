# BenchFS Docker Image - Optimized Build with Cached UCX/MPI Base
# This Dockerfile uses a pre-built UCX/MPI base image to speed up builds
#
# Prerequisites:
#   1. Build the base image first:
#      docker build -f Dockerfile.ucx-mpi-base -t benchfs/ucx-mpi-base:1.0 .
#
#   2. Then build this image:
#      docker build -f Dockerfile.optimized -t benchfs:latest .
#
# The base image only needs to be rebuilt when UCX/MPI versions change.

# ============================================================================
# Stage 1: Builder with Rust
# ============================================================================
FROM benchfs/ucx-mpi-base:1.0 AS builder

ENV DEBIAN_FRONTEND=noninteractive

# Install Rust and build dependencies
RUN apt-get update && apt-get install -y \
    curl \
    libclang-dev \
    && rm -rf /var/lib/apt/lists/*

RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# Copy pluvio runtime (required dependency)
WORKDIR /build
COPY pluvio /build/pluvio

# Copy BenchFS source
COPY benchfs/Cargo.toml benchfs/Cargo.lock /build/
COPY benchfs/src /build/src/
COPY benchfs/build.rs /build/
COPY benchfs/ior_integration /build/ior_integration

# Build BenchFS library and binaries with MPI support
RUN cargo build --features mpi-support

# Install BenchFS library for IOR integration
RUN set -x && \
    echo "=== Installing BenchFS library ===" && \
    PREFIX=/usr/local && \
    mkdir -p $PREFIX/lib $PREFIX/include $PREFIX/lib/pkgconfig && \
    cp -v target/debug/libbenchfs.so $PREFIX/lib/ && \
    cp -rv ior_integration/benchfs_backend/include/* $PREFIX/include/ && \
    printf '# BenchFS pkg-config file\nprefix=/usr/local\nexec_prefix=${prefix}\nlibdir=${prefix}/lib\nincludedir=${prefix}/include\n\nName: BenchFS\nDescription: BenchFS distributed filesystem library\nVersion: 0.1.0\nLibs: -L${libdir} -lbenchfs -lpthread -ldl -lm\nCflags: -I${includedir}\n' > $PREFIX/lib/pkgconfig/benchfs.pc && \
    ldconfig

# Set up pkg-config for IOR build
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
ENV LD_LIBRARY_PATH=/usr/local/lib

# Build IOR with BenchFS support
WORKDIR /build/ior_integration
RUN set -x && \
    ./sync-benchfs.sh && \
    cd ior && \
    ./bootstrap && \
    ./configure CFLAGS="-O0 -g3 -ggdb3 -fno-omit-frame-pointer -UNDEBUG" LD_FLAGS="-Wl,-rdynamic" --prefix=/usr/local && \
    make -j$(nproc) && \
    make install && \
    ldconfig && \
    ior -h 2>&1 | grep -i benchfs

# ============================================================================
# Stage 2: Runtime
# ============================================================================
FROM benchfs/ucx-mpi-base:1.0

# Copy BenchFS binaries from builder
COPY --from=builder /build/target/debug/benchfsd /usr/local/bin/
COPY --from=builder /build/target/debug/benchfsd_mpi /usr/local/bin/

# Copy BenchFS library and IOR
COPY --from=builder /usr/local/lib/libbenchfs.so /usr/local/lib/
COPY --from=builder /usr/local/lib/pkgconfig/benchfs.pc /usr/local/lib/pkgconfig/
COPY --from=builder /usr/local/include/benchfs_c_api.h /usr/local/include/
COPY --from=builder /usr/local/bin/ior /usr/local/bin/
COPY --from=builder /usr/local/bin/mdtest /usr/local/bin/

# Update library cache
RUN ldconfig

# Install debugging tools
RUN apt-get update && apt-get install -y \
    gdb \
    procps

# Set library paths
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
ENV LD_LIBRARY_PATH=/usr/local/lib

WORKDIR /workspace

# Inherit SSH, UCX, MPI setup from base image
CMD ["/usr/sbin/sshd", "-D"]
